const replaceData = [
  ["ガ", "カ゛"],
  ["ギ", "キ゛"],
  ["グ", "ク゛"],
  ["ゲ", "ケ゛"],
  ["ゴ", "コ゛"],
  ["ザ", "サ゛"],
  ["ジ", "シ゛"],
  ["ズ", "ス゛"],
  ["ゼ", "セ゛"],
  ["ゾ", "ソ゛"],
  ["ダ", "タ゛"],
  ["ヂ", "チ゛"],
  ["ヅ", "ツ゛"],
  ["デ", "テ゛"],
  ["ド", "ト゛"],
  ["バ", "ハ゛"],
  ["ビ", "ヒ゛"],
  ["ブ", "フ゛"],
  ["ベ", "ヘ゛"],
  ["ボ", "ホ゛"],
  ["パ", "ハ゜"],
  ["ピ", "ヒ゜"],
  ["プ", "フ゜"],
  ["ペ", "ヘ゜"],
  ["ポ", "ホ゜"],
  ["ァ", "ア"],
  ["ィ", "イ"],
  ["ゥ", "ウ"],
  ["ェ", "エ"],
  ["ォ", "オ"],
  ["ヵ", "カ"],
  ["ㇰ", "ク"],
  ["ヶ", "ケ"],
  ["ㇱ", "シ"],
  ["ㇲ", "ス"],
  ["ッ", "ツ"],
  ["ㇳ", "ト"],
  ["ㇴ", "ヌ"],
  ["ㇵ", "ハ"],
  ["ㇶ", "ヒ"],
  ["ㇷ", "フ"],
  ["ㇸ", "ヘ"],
  ["ㇹ", "ホ"],
  ["ㇺ", "ム"],
  ["ャ", "ヤ"],
  ["ュ", "ユ"],
  ["ョ", "ヨ"],
  ["ㇻ", "ラ"],
  ["ㇼ", "リ"],
  ["ㇽ", "ル"],
  ["ㇾ", "レ"],
  ["ㇿ", "ロ"],
  ["ヮ", "ワ"]
];

export default (str: string) => {
  if (!str) return "";

  const parsed = str
    .split("")
    .map(v => {
      const findResult = replaceData.find(element => element[0] === v);
      return findResult ? findResult[1][0] : v;
    })
    .join("");

  return parsed[parsed.length - 1] === "ー"
    ? parsed[parsed.length - 2]
    : parsed[parsed.length - 1];
};
